package io.kafkaobs.substrates;

import io.kafkaobs.shared.models.ReporterSignal;
import io.humainary.modules.serventis.reporters.api.Reporters;
import io.kafkaobs.substrates.sink.Capture;
import io.kafkaobs.substrates.sink.SinkQuery;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static java.util.concurrent.TimeUnit.SECONDS;
import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;

/**
 * Test direct emission of ReporterSignals to kafka.situations circuit.
 *
 * TODO Story 4.3: Re-enable when getCircuits() and query() are replaced with Substrates API
 */
@Disabled("Disabled pending Story 4.3 - getCircuits() and query() methods removed")
@SpringBootTest
class SituationsEmissionTest {

    @Autowired
    private CortexRuntime cortex;

    @Test
    void shouldCaptureDirectlyEmittedReporterSignal() {
        // Given - find the cluster.situation channel
        var channel = cortex.getCircuits().stream()
            .filter(circuit -> "kafka.situations".equals(circuit.getName()))
            .flatMap(circuit -> circuit.getConduits().stream())
            .filter(conduit -> "reporters".equals(conduit.getName()))
            .flatMap(conduit -> conduit.getChannels().stream())
            .findFirst()
            .orElseThrow(() -> new AssertionError("cluster.situation channel not found"));

        // When - emit a ReporterSignal directly
        ReporterSignal signal = ReporterSignal.warning(
            "cluster.situation",
            "Test warning for direct emission",
            Map.of(
                "source", "TestEmitter",
                "pattern", "test-pattern"
            )
        );

        channel.emit(signal);

        // Then - signal should be captured in sink
        await().atMost(5, SECONDS).untilAsserted(() -> {
            // Query without type filter first to see what's there
            SinkQuery allQuery = new SinkQuery(
                Optional.of(Instant.now().minus(Duration.ofMinutes(1))),
                Optional.of(Instant.now()),
                Optional.of("cluster.situation"),
                Optional.empty()
            );

            List<Capture> allCaptures = cortex.getSink().query(allQuery);
            System.out.println("=== ALL CAPTURES FOR cluster.situation ===");
            allCaptures.forEach(c -> System.out.println("  " + c));

            assertThat(allCaptures)
                .as("Should capture the emitted signal (without type filter)")
                .isNotEmpty();

            assertThat(allCaptures)
                .anyMatch(c -> "WARNING".equals(c.value())
                    && "cluster.situation".equals(c.subject())
                    && "TestEmitter".equals(c.metadata().get("source")));
        });
    }
}
